{"pages":[{"title":"","text":"本博客基于静态引擎 Hexo，更多信息参见hexo官方文档。前端页面魔改自icarus 模版文件保存在目录下theme_bakup.zip 欢迎访问：平静优雅","link":"/README.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Hexo博客使用方法以及已踩过的坑","text":"本博客基于静态引擎 Hexo，更多信息参见hexo官方文档。前端页面魔改自icarus hexo指令 创建一篇新文章123$ hexo new \"My New Post\"#可简写为$ hexo n \"My New Post\" 本地运行123$ hexo server#可简写为$ hexo s 生成静态文件123$ hexo generate#可简写为$ hexo g 部署到远程仓库123$ hexo deploy#可简写为$ hexo d 清理文件（删除文章后）1$ hexo clean 踩坑CNAME文件在clean后丢失为博客绑定域名时，要在public文件夹（最后部署到远程仓库的所有静态文件）中放入CNAME文件，内容为将要绑定的域名，用于对绑定别名的确认。 当clean后public文件夹下的所有内容会重新生成，CNAME文件同时丢失。之后只能手动将CNAME放入public文件夹，十分麻烦。 解决方法：只需将CNAME文件放入source文件夹下，generate时会自动将source目录下的文件copy一份到新的静态文件中。其他类型的文件同理。 前端页面问题响应式页面手机端显示迷之白框左右横条，F12后发现是有一行代码过长，对code样式如下定义即可： 1234567code padding: 0 background: rgba(41, 41, 41, 0.03) padding-left: 10px padding-right: 10px white-space: pre-wrap //自动换行，不显示横向滚动条 word-wrap: break-word //自动换行，不显示横向滚动条","link":"/2020/03/05/hello-world/"},{"title":"[JUnit报错] JUnit version 3.8 or later expected","text":"IDEA CE 2018.3 下使用Maven导入JUnit依赖，发现不能正常单元测试，报错如下： 123456789101112!!! JUnit version 3.8 or later expected:java.lang.ClassNotFoundException: junit.framework.ComparisonFailure at java.net.URLClassLoader.findClass(URLClassLoader.java:382) at java.lang.ClassLoader.loadClass(ClassLoader.java:424) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349) at java.lang.ClassLoader.loadClass(ClassLoader.java:357) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:264) at com.intellij.rt.execution.junit.JUnitStarter.junitVersionChecks(JUnitStarter.java:221) at com.intellij.rt.execution.junit.JUnitStarter.canWorkWithJUnitVersion(JUnitStarter.java:207) at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:61) 要求3.8以上？看了一眼相应的依赖配置为4.11如下： &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.11&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt;某CSDN博客说使用版本号 &lt;version&gt;4.12-beta-3&lt;/version&gt;，不起作用。 之后尝试了各种版本都失败的情况下，尝试手动导入jar包，成功出现绿条，在此记录。 20/06/05更新：更换IDEA Ultimate版后 reload project 问题消失","link":"/2020/06/05/JUnit%E6%8A%A5%E9%94%99-JUnit-version-3-8-or-later-expected/"},{"title":"填写【疫情通】自动化","text":"故事背景学校要求每天在企业账号的某个页面中填写自己的体温等信息，再通过定位获取位置信息。体温等基本信息填写一次后会自动保存，但是位置要求每次都要打开定位功能，点击获取按钮，再弹出的对话框“是否允许XXX网页获取位置信息”中选择一次是，最后点击提交完成。 看似还好的几个步骤每天都要进行，长年累月不免有点心烦。于是有了如下尝试… 尝试目标URL： https://xxcapp.xidian.edu.cn/ncov/wap/default/index?from=history发现需要学号登录，意味着还要加一步模拟登陆。F12 看到如下内容： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980confirm() { if(this.hasFlag == 1) { wapalert('每天只能填报一次，你已提交过（Daily Report can only be submitted once a day. You have already submitted）'); return false; } if(!this.valid(this.info)) { return false; } wapconfirm('每天只能填报一次，请确认信息是否全部正确？（Daily Report can only be submitted once a day. Please confirm that all the information is correct.）', '确认&lt;br&gt;Submit', '再看看&lt;br&gt;Check again', function () { vm.save(); });},save() { try { if(!this.valid(this.info)) { return false; } var _this = this; if(_this.info.sfjcbh == 0) { _this.info.jcbhlx = ''; _this.info.jcbhrq = ''; } if(_this.info.sfcyglq == 0) { _this.info.gllx = ''; _this.info.glksrq = ''; } if(_this.info.sfcxtz == 0) { _this.info.sfyyjc = 0; } if(_this.info.sfyyjc == 0) { _this.info.jcjgqr = 0; _this.info.jcjg = ''; } if(_this.info.sfcxzysx ==0) { _this.info.qksm = ''; } if(_this.sfzgn==1){ _this.info.szcs=&quot;&quot;; _this.info.szgj=&quot;&quot;; } if(_this.ajaxLock) { wapalert('数据提交中'); return false; } _this.ajaxLock = true; waploading('', '数据提交中, 请稍候...'); $.ajax({ url: '/ncov/wap/default/save', type: 'POST', dataType: 'JSON', data: _this.info, success: function (resp) { _this.ajaxLock = false; waploading('hide'); if(resp.e == 0) { wapalert('提交信息成功'); }else { wapalert(resp.m); } }, error: function () { _this.ajaxLock = false; waploading('hide'); wapalert('系统繁忙，请稍后再试！'); } }); } catch (e) { alert(e); }} 按下提交按钮后，发送一个ajax请求，一览无余。剩下的就是构造data了。。。。","link":"/2020/05/11/%E5%86%99%E4%B8%AA%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E7%96%AB%E6%83%85%E9%80%9A/"},{"title":"第一篇文章记录Markdown的语法","text":"我对于标记语言 Markdown 用的并不多，只知道一些常用的语法。第一篇文章熟悉一下环境，对Markdown的语法一点记录，以便后期查阅。 标题# 标题文字（1个#是一级标题，2个#是二级标题，以此类推）⚠️中间有空格 例：123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 输出：这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题 代码 单行代码用反引号` 包住代码 ，即`代码块` 例：`print(&quot;hello&quot;)` 输出：print(&quot;hello&quot;) 代码块用三个反引号` 包住代码块 且每个反引号换行 ```代码块```对于Hexo博客且安装highlight.js实现代码高亮 可有以下参数 ``` [language] [title] [url] [link text]代码块``` 例：12345``` java helloworld.java /archives/ 归档public static void main(String args[]){ System.out.println(\"Hello World!\");}``` 输出： helloworld.java归档123public static void main(String args[]){ System.out.println(\"Hello World!\");} 列表无序列表- 内容⚠️中间有空格, - + * 均可，代表不同种类 例：123456- 狮子🦁️- 老虎🐯+ 苹果🍎+ 桔子🍊* 向日葵🌻* 玫瑰 🌹 输出： 狮子🦁️ 老虎🐯 苹果🍎 桔子🍊 向日葵🌻 玫瑰 🌹 有序列表数字. 内容⚠️中间有空格 例：1231. 把冰箱门打开2. 把🐘放进去3. 把冰箱门关上 输出： 把冰箱门打开 把🐘放进去 把冰箱门关上 字体 加粗**包起来 斜体*包起来 斜体加粗***包起来 删除线~~包起来 例：1234**加粗***斜体****加粗斜体***~~加删除线~~ 输出：加粗斜体加粗斜体加删除线 引用&gt;引用的内容⚠️中间无空格，可以加多个来嵌套 例：12345&gt;引用内容&gt;&gt;引用内容&gt;&gt;&gt;引用内容&gt;引用内容 输出： 引用内容 引用内容 引用内容 引用内容 分割线三个及以上的-或* 例：123456-----------------***************** 输出： 图片![caption](图片地址 ‘’鼠标在图片上显示的文字’’) 例：![哈莉·奎茵（Harley Quinn）](http://ent.k618.cn/ylzx/201610/W020161015180432690118.jpeg &quot;小丑女&quot;) 输出： 超链接[超链接名](超链接地址 “超链接title”) 例：[百度](http://baidu.com) 输出：百度 表格123表头|表头|表头---|:--:|---:内容|内容|内容 ⚠️-有一个就可以 多个为了对齐默认左对齐 两边加:居中 右边加:居右 例：1234姓名|性别|年龄---|:--:|---:小明|男|12小花|女|24 输出： 姓名 性别 年龄 小明 男 12 小花 女 24 流程图未安装相关插件，用到在补充。。 END","link":"/2020/03/07/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E8%AE%B0%E5%BD%95Markdown%E7%9A%84%E8%AF%AD%E6%B3%95/"},{"title":"使用tomcat7-maven插件一键部署项目","text":"常规部署方法将项目打包为war包后，上传到服务器的Tomcat安装目录的Webapps文件夹下，启动tomcat完成部署。下面介绍使用tomcat7-maven插件在idea中一键部署项目。 1.在CentOS7服务器安装tomcat7在浏览器访问ip:8080 查看是否安装成功找到[tomcat安装的根路径]/conf/tomcat-users.xml 文件，编辑如下： 12345&lt;tomcat-users&gt; &lt;role rolename=&quot;manager-gui&quot;/&gt; &lt;role rolename=&quot;manager-script&quot;/&gt; &lt;user username=&quot;admin&quot; password=&quot;admin&quot; roles=&quot;manager-gui, manager-script&quot;/&gt;&lt;/tomcat-users&gt; 在tomcat中新建了一个用户，修改后重新启动tomcat 安装maven输入mvn -v 查看是否安装成功打开[Maven的安装路径]/conf/setting.xml文件 ，找到这一段，新建一个server 1234567&lt;servers&gt; &lt;server&gt; &lt;id&gt;iot&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt; 在项目中配置在项目的pom.xml文件中的plugins标签中添加后 右键-maven-reimport 1234567891011121314151617181920&lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;configuration&gt; &lt;!-- 填写自己服务器的IP地址和端口号,并且其他的不变,Tomcat7、8、9使用这个，Tomcat6使用另一个--&gt; &lt;url&gt;http://192.168.100.69:8080/manager/text&lt;/url&gt; &lt;server&gt;iot&lt;/server&gt; &lt;!-- 这个账户和密码是自定义的，和Maven，Tomcat中配置要保持一致--&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin&lt;/password&gt; &lt;port&gt;8080&lt;/port&gt; &lt;!-- 若tomcat项目中已存在，且使&quot;mvn tomcat7:deploy&quot;命令必须要设置下面的代码 --&gt; &lt;!-- 更新项目时，仅需要执行&quot;mvn tomcat7:redeploy&quot;命令即可 --&gt; &lt;!-- 上述命令无论服务器是tomcat7、8或9，均是使用&quot;mvn tomcat7:deploy&quot;或&quot;mvn tomcat7:redeploy&quot; --&gt; &lt;update&gt;true&lt;/update&gt; &lt;!-- 项目路径 --&gt; &lt;path&gt;/&lt;/path&gt; &lt;/configuration&gt;&lt;/plugin&gt; 到此配置完成，以wagang为例部署：点击右侧maven-wagang-Plugins-tomcat7-tomcat7:deploy提示SUCCESS即可 打开浏览器测试","link":"/2020/07/31/%E4%BD%BF%E7%94%A8tomcat7-maven%E6%8F%92%E4%BB%B6%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"}],"tags":[{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"JUnit","slug":"JUnit","link":"/tags/JUnit/"},{"name":"Maven","slug":"Maven","link":"/tags/Maven/"},{"name":"Hack","slug":"Hack","link":"/tags/Hack/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"Tomcat","slug":"Tomcat","link":"/tags/Tomcat/"}],"categories":[{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"日常","slug":"日常","link":"/categories/%E6%97%A5%E5%B8%B8/"},{"name":"Markdown","slug":"Markdown","link":"/categories/Markdown/"}]}